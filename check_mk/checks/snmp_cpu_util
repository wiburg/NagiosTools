#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# based on ucd_cpu_util check of check_mk, 
# warn and crit thresholds can be defined on total, system, user, and io levels

# configurable thresholds:
factory_settings["snmp_cpu_util_default_levels"] = {
    "total"    : (90, 95),
#     "system"   : (50, 70),
#     "user"     : (60, 80),
#     "wait"     : (10, 30),
}

def inventory_snmp_cpu_util(info):
    if len(info) == 1:
        # return [(None, "snmp_cpu_util_default_levels")]
        return [(None, {})]

def check_snmp_cpu_util(item, params, info):
    counters = map(saveint, info[0])
    rates = []
    perfdata = []
    this_time = time.time()
    some_counter_wrapped = False
    for n, c in enumerate(counters):
        name = "snmp_cpu.util.%d" % n
        try:
            timedif, rate = get_counter(name, this_time, c)
            rates.append(rate)
        except:
            some_counter_wrapped = True

    if some_counter_wrapped:
        return (0, "OK - first check, no counter data yet")

    total = sum(rates)
    if total == 0:
        return (3, "UNKNOWN - counters have not moved since last check, looks like state fake data")

    parts = [ r/total for r in rates ]
    cpu = {}
    cpu["user"] = 100 * (parts[0] + parts[1])
    cpu["system"] = 100 * (parts[2] + parts[5] + parts[6])
    cpu["wait"] = 100 * (parts[4])
    cpu["total"] = cpu["user"] + cpu["system"] + cpu["wait"]

    worststate = 0
    output = "OK" 
    addoutput = []
    for paramname in ["total", "user", "system", "wait" ]:
        if paramname in params:
            warn, crit = params[paramname]
            # check the warn and crit limits
            if ( cpu[paramname] >= crit):
                worststate = 2
                addoutput.append(paramname + " cpu usage exceed threshold (" + str(crit) + ")")
                
            elif  cpu[paramname] >= warn:
                worststate = max(worststate, 1)
                addoutput.append(paramname + " cpu usage exceed threshold (" + str(warn) + ")")
    
            if paramname != "total":
                perfdata.append((paramname,  "%.3f" % cpu[paramname], warn, crit))

        else:
            warn, crit = None, None
            if paramname != "total":
                perfdata.append((paramname,  "%.3f" % cpu[paramname]))
        

    extraoutput =  ', '.join(addoutput)

    if worststate == 1:
        output = "WARNING (" + extraoutput + ")"
    elif worststate == 2:
        output = "CRITICAL (" + extraoutput + ")"

    return (worststate, output + " - total: %2.1f%%, user: %2.1f%%, system: %2.1f%%, wait: %2.1f%%" %
            (cpu["total"], cpu["user"], cpu["system"], cpu["wait"]), perfdata)


check_info['snmp_cpu_util'] = (check_snmp_cpu_util, "CPU usage", 1,  inventory_snmp_cpu_util)
snmp_info['snmp_cpu_util'] = ( ".1.3.6.1.4.1.2021.11", [ 50, 51, 52, 53, 54, 55, 56 ])

# We are not sure how to safely detect the UCD SNMP Daemon. We know that
# it is mainly used on Linux, but not only. But fetching and OID outside
# of the info area for scanning is not a good idea. It will slow down
# scans for *all* hosts.
snmp_scan_functions['snmp_cpu_util'] = \
    lambda oid: "linux" in oid(".1.3.6.1.2.1.1.1.0").lower() or \
                "CMC-TC" in oid(".1.3.6.1.2.1.1.1.0")

check_default_levels['snmp_cpu_util'] = "snmp_cpu_util_default_levels"

checkgroup_of['snmp_cpu_util'] = "snmp_cpu_util"
